// Mocks generated by Mockito 5.0.3 from annotations
// in run_bus/test/features/domain/usecase/current_location_user_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:run_bus/core/error/failures.dart' as _i6;
import 'package:run_bus/features/data/external/drivers/location_verify_adapter.dart'
    as _i12;
import 'package:run_bus/features/domain/entites/location.dart' as _i7;
import 'package:run_bus/features/domain/entites/location_area.dart' as _i3;
import 'package:run_bus/features/domain/entites/reference.dart' as _i10;
import 'package:run_bus/features/domain/repositories/geocoding_repository.dart'
    as _i8;
import 'package:run_bus/features/domain/repositories/integration_area_repository.dart'
    as _i11;
import 'package:run_bus/features/domain/repositories/location_repository.dart'
    as _i4;
import 'package:run_bus/features/domain/repositories/reference_repository.dart'
    as _i9;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeLocationArea extends _i1.Fake implements _i3.LocationArea {}

/// A class which mocks [ILocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationRepository extends _i1.Mock
    implements _i4.ILocationRepository {
  MockILocationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Location>> getCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLocation, []),
              returnValue:
                  Future.value(_FakeEither<_i6.Failure, _i7.Location>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.Location>>);
}

/// A class which mocks [IGeocodingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGeocodingRepository extends _i1.Mock
    implements _i8.IGeocodingRepository {
  MockIGeocodingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, String?>> coordToAndress(
          double? lng, double? lon) =>
      (super.noSuchMethod(Invocation.method(#coordToAndress, [lng, lon]),
              returnValue: Future.value(_FakeEither<_i6.Failure, String?>()))
          as _i5.Future<_i2.Either<_i6.Failure, String?>>);
}

/// A class which mocks [IReferenceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIReferenceRepository extends _i1.Mock
    implements _i9.IReferenceRepository {
  MockIReferenceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.Reference>> findReferenceByDistrict(
          String? district) =>
      (super.noSuchMethod(
              Invocation.method(#findReferenceByDistrict, [district]),
              returnValue:
                  Future.value(_FakeEither<_i6.Failure, _i10.Reference>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i10.Reference>>);
}

/// A class which mocks [ILocationAreaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationAreaRepository extends _i1.Mock
    implements _i11.ILocationAreaRepository {
  MockILocationAreaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.LocationArea>>>
      findLocationArea() =>
          (super.noSuchMethod(Invocation.method(#findLocationArea, []),
                  returnValue: Future.value(
                      _FakeEither<_i6.Failure, List<_i3.LocationArea>>()))
              as _i5.Future<_i2.Either<_i6.Failure, List<_i3.LocationArea>>>);
}

/// A class which mocks [ILocationVerifyAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationVerifyAdapter extends _i1.Mock
    implements _i12.ILocationVerifyAdapter {
  MockILocationVerifyAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isInside(List<_i7.Location>? listLocations, _i7.Location? location) =>
      (super.noSuchMethod(
          Invocation.method(#isInside, [listLocations, location]),
          returnValue: false) as bool);
  @override
  _i3.LocationArea neaestPoint(
          List<_i3.LocationArea>? locationArea, _i7.Location? resLocation) =>
      (super.noSuchMethod(
          Invocation.method(#neaestPoint, [locationArea, resLocation]),
          returnValue: _FakeLocationArea()) as _i3.LocationArea);
}
